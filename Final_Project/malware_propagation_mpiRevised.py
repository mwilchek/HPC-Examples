from collections import namedtuple
from mpi4py import MPI
import random
import sys
import math
import time
import numpy as np

''' This script simulates malware propagation from bluetooth enabled devices using a Cellular Automata Model. 
For more information please go here: http://www.ijcncs.org/published/volume3/issue3/p1_3-3.pdf '''

comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()
stat = MPI.Status()

print("First Generation for rank: " + str(rank))

# sets how many devices in location; set to 100%
Dinit = 1
NX = 50
NY = 50
generations = 50  # also will be treated as t for step 6

# Setup subgrid for MPI Parallelization #######################################
if size > NX:
    print("Not enough ROWS")
    exit()

subROWS = NX // size + 2

# Transmission Threshold (TR) is the probability which a node transforms from state V to other states
TR = .5
# End of step 5 has logic if mobile device is charged or is being charged (not included)
phone_power = 100
SR = -1

# Refer to page 5 of probability parameters & page 7 for simulation
MobilePhone = namedtuple('Mobile', 'STATE D HV VI VE EI IQ QI ER ID DR VR')
tnew = []
start = time.time()


def printf(format, *args):
    sys.stdout.write(format % args)


def showCellPhones(nx, ny, t):
    for i in range(ny):
        for j in range(nx):
            # If node is in Health State (Beige)
            if tnew[i][j].STATE == 'H':
                printf('\033[46m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Vulnerable State (Violet)
            elif tnew[i][j].STATE == 'V':
                printf('\033[45m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Exposed State (Yellow)
            elif tnew[i][j].STATE == 'E':
                printf('\033[43m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Infectious State (Red)
            elif tnew[i][j].STATE == 'I':
                printf('\033[100m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Diagnosed State (Blue)
            elif tnew[i][j].STATE == 'D':
                printf('\033[44m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Recovered State (Green)
            elif tnew[i][j].STATE == 'R':
                printf('\033[42m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Quiet State (White)
            elif tnew[i][j].STATE == 'Q':
                printf('\033[47m'"%c "'\033[0m', tnew[i][j].STATE)

            else:
                printf('\033[0m'"%c "'\033[0m', tnew[i][j].STATE)
        printf("\n")
    printf('\x1b[2J\x1b[H')

    time.sleep(1)


def showCellPhones_persist(nx, ny, t):
    for i in range(ny):
        for j in range(nx):
            # If node is in Health State (Beige)
            if tnew[i][j].STATE == 'H':
                printf('\033[46m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Vulnerable State (Violet)
            elif tnew[i][j].STATE == 'V':
                printf('\033[45m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Exposed State (Yellow)
            elif tnew[i][j].STATE == 'E':
                printf('\033[43m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Infectious State (Red)
            elif tnew[i][j].STATE == 'I':
                printf('\033[100m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Diagnosed State (Blue)
            elif tnew[i][j].STATE == 'D':
                printf('\033[44m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Recovered State (Green)
            elif tnew[i][j].STATE == 'R':
                printf('\033[42m'"%c "'\033[0m', tnew[i][j].STATE)

            # If node is in Quiet State (White)
            elif tnew[i][j].STATE == 'Q':
                printf('\033[47m'"%c "'\033[0m', tnew[i][j].STATE)

            else:
                printf('\033[0m'"%c "'\033[0m', tnew[i][j].STATE)
        printf("\n")


for i in range(NY):
    new = []
    for j in range(NX):
        # Instantiate nodes with the following:
        # STATE is empty, distribution is random, prob from Healthy to Vulnerable,

        # Probabilities:                             HV   VI   VE   EI   IQ   QI   ER   ID   DR   VR
        # Parameters from paper:                    0.5, 0.6, 0.0, 0.2, 0.0, 0.15, 0.4, 0.5, 0.4, 0.1
        # Custom parameters 1:                      0.5, 0.8, 0.0, 0.8, 0.2, 0.8, 0.02, 0.1, 0.4, 0.1
        # Custom parameters 2:                      0.5, 0.5, 0.4, 0.6, 0.5, 0.7, 0.1,  0.3, 0.3, 0.1
        Node = MobilePhone(' ', random.random(), 0.5, 0.5, 0.4, 0.6, 0.5, 0.7, 0.1, 0.3, 0.3, 0.1)

        new.append(Node)
    tnew.append(new)

# Initialize mobile phone network
for i in range(1, NY - 1):
    for j in range(1, NX - 1):
        if Dinit - tnew[i][j].D > 0:
            tnew[i][j] = tnew[i][j]._replace(STATE='H')

# Infect a device in the middle of the grid */
# Constant source infected */ //	tnew[nx/2][ny/2].B = 1;
tnew[NY // 2][NX // 2] = tnew[NY // 2][NX // 2]._replace(STATE='I')  # changes center device to infected in location

# Show initial state
showCellPhones(NX, NY, tnew)

# Set all other healthy nodes to Vulnerable now 1 device is infected
for i in range(1, NY - 1):
    for j in range(1, NX - 1):
        if Dinit - tnew[i][j].D > 0 and tnew[i][j].STATE != 'I':
            tnew[i][j] = tnew[i][j]._replace(STATE='V')

# Show vulnerable state
showCellPhones(NX, NY, tnew)


def updateArrayToList(matrix, tnew):

    # convert manipulated matrix to list for output
    for i in range(1, NY - 1):
        for j in range(1, NX - 1):
            if matrix[i][j] == 0:
                tnew[i][j] = tnew[i][j]._replace(STATE='H')
            elif matrix[i][j] == 1:
                tnew[i][j] = tnew[i][j]._replace(STATE='V')
            elif matrix[i][j] == 2:
                tnew[i][j] = tnew[i][j]._replace(STATE='E')
            elif matrix[i][j] == 3:
                tnew[i][j] = tnew[i][j]._replace(STATE='I')
            elif matrix[i][j] == 4:
                tnew[i][j] = tnew[i][j]._replace(STATE='D')
            elif matrix[i][j] == 5:
                tnew[i][j] = tnew[i][j]._replace(STATE='R')
            elif matrix[i][j] == 6:
                tnew[i][j] = tnew[i][j]._replace(STATE='Q')

    return tnew


def convertListToArray(tnew):
    # instantiate a matrix then replace values based on node list
    matrix = np.random.binomial(1, 1, size=subROWS * NY)
    matrix = np.reshape(matrix, (subROWS, NY))

    for i in range(1, matrix.shape[1] - 1):
        for j in range(1, matrix.shape[0] - 1):
            try:
                if tnew[i][j].STATE == 'H':
                    matrix[i][j] = 0
                elif tnew[i][j].STATE == 'V':
                    matrix[i][j] = 1
                elif tnew[i][j].STATE == 'E':
                    matrix[i][j] = 2
                elif tnew[i][j].STATE == 'I':
                    matrix[i][j] = 3
                elif tnew[i][j].STATE == 'D':
                    matrix[i][j] = 4
                elif tnew[i][j].STATE == 'R':
                    matrix[i][j] = 5
                elif tnew[i][j].STATE == 'Q':
                    matrix[i][j] = 6

            except IndexError:
                pass

    # Infect middle node
    matrix[matrix.shape[0] // 2][matrix.shape[1] // 2] = 3

    return matrix


matrix = convertListToArray(tnew)
subGrid = np.reshape(matrix, (subROWS, NY))
tnew_matrix = np.copy(subGrid)


# Function definitions
def msgUp():
    comm.send(subGrid[subROWS - 2, :], dest=rank + 1)
    subGrid[subROWS - 1, :] = comm.recv(source=rank + 1)
    return 0


def msgDown():
    comm.send(subGrid[1, :], dest=rank - 1)
    subGrid[0, :] = comm.recv(source=rank - 1)
    return 0


def spreadMalware():
    global subGrid
    #    print(id(t),id(tnew),id(t[0]),id(tnew[0]),id(new),id(t[0][0]))
    for i in range(1, NY - 1):
        for j in range(1, subROWS - 1):
            # Rules of the game ################ PRIMARY CONDITIONAL CHECK ###################
            # Breaking out step 5 on page 7

            # Node x is (i,j)
            # Count number of infected neighbors (IC) around x node
            IC = 0
            if subGrid[i + 1][j + 1] == 3:
                IC += 1
            elif subGrid[i - 1][j + 1] == 3:
                IC += 1
            elif subGrid[i + 1][j - 1] == 3:
                IC += 1
            elif subGrid[i - 1][j - 1] == 3:
                IC += 1
            elif subGrid[i - 1][j] == 3:
                IC += 1
            elif subGrid[i][j - 1] == 3:
                IC += 1
            elif subGrid[i][j + 1] == 3:
                IC += 1
            elif subGrid[i + 1][j] == 3:
                IC += 1

            # Check if node x is Exposed
            if subGrid[i][j] == 2:
                # Check if node x changes from E to R with probability of ER
                if tnew[i][j].ER > random.random():
                    tnew_matrix[i][j] = 5
                # Or node x changes from E to I with probability of EI + ER
                elif tnew[i][j].EI + tnew[i][j].ER > random.random():
                    tnew_matrix[i][j] = 3

            # Check if node x is Diagnosed
            if subGrid[i][j] == 4:
                # Check if node x changes from D to R with probability of DR
                if tnew[i][j].DR > random.random():
                    tnew_matrix[i][j] = 5

            # Check if x node is infected
            if subGrid[i][j] == 3:
                # Calculate Spread Rate (SR), Resistance Rate (RR), Node Distance (D), and Beta (b) for each X node

                # Does a corner node exist?
                if 0.293 > random.random():
                    # If the state of its neighbor node y is V
                    # Check node diagonally to the upper right if it exists
                    try:
                        if subGrid[i + 1][j + 1] == 1:
                            tmax = int(step)

                            # Formula for SR found on page 6, g1 and g2 are user defined constants
                            g1 = random.randint(1, 10)
                            g2 = random.randint(1, 10)
                            # try:
                            #     SR = (1 / (g1 * math.pow(math.e, (1 / tmax)))) - (
                            #                 (0.3 * IC) * (1 / (g2 * math.pow(math.e, ((1 / IC) + 1)))))
                            # except ZeroDivisionError:
                            #     SR = -1

                            # Formula for RR found on page 6. alpha can be user defined
                            alpha = random.random()
                            RR = (1 - math.pow(math.e, (alpha * tmax))) / (1 + math.pow(math.e, (alpha * tmax)))

                            # should be IR / RR * sqrt(2); but IR is not defined so SR is used
                            try:
                                b = SR / (RR * math.sqrt(2))
                            except ZeroDivisionError:
                                # If RR is 0 set Beta to 1; the device has no resistance and shall change
                                b = 1

                            #  and if β is greater than TR
                            if b > TR:
                                # node y changes its state from V to E with probability of VE
                                if tnew[i + 1][j + 1].VE > random.random():
                                    tnew_matrix[i + 1][j + 1] = 2
                                # Otherwise, node y remains in the previous state.
                                else:
                                    pass

                            if SR < 0 or RR > 0.01:
                                # node y changes its state from V to R with probability of VR. At the same time, node x
                                # transforms its state from I to D with probability of ID
                                if tnew[i + 1][j + 1].VR > random.random():
                                    tnew_matrix[i + 1][j + 1] = 5

                                # Added to spread malware
                                else:
                                    tnew_matrix[i + 1][j + 1] = 3

                                if tnew[i][j].ID > random.random():
                                    tnew_matrix[i][j] = 4

                    except IndexError:
                        pass

                    # Check node diagonally to the upper left if it exists
                    try:
                        if subGrid[i - 1][j + 1] == 1:
                            tmax = int(step)

                            # Formula for SR found on page 6, g1 and g2 are user defined constants
                            g1 = random.randint(1, 10)
                            g2 = random.randint(1, 10)
                            # try:
                            #     SR = (1 / (g1 * math.pow(math.e, (1 / tmax)))) - (
                            #                 (0.3 * IC) * (1 / (g2 * math.pow(math.e, ((1 / IC) + 1)))))
                            # except ZeroDivisionError:
                            #     SR = -1

                            # Formula for RR found on page 6. alpha can be user defined
                            alpha = random.random()
                            RR = (1 - math.pow(math.e, (alpha * tmax))) / (1 + math.pow(math.e, (alpha * tmax)))

                            # should be IR / RR * sqrt(2); but IR is not defined so SR is used
                            try:
                                b = SR / (RR * math.sqrt(2))
                            except ZeroDivisionError:
                                # If RR is 0 set Beta to 1; the device has no resistance and shall change
                                b = 1

                            #  and if β is greater than TR
                            if b > TR:
                                # node y changes its state from V to E with probability of VE
                                if tnew[i - 1][j + 1].VE > random.random():
                                    tnew_matrix[i - 1][j + 1] = 2
                                # Otherwise, node y remains in the previous state.
                                else:
                                    pass

                            if SR < 0 or RR > 0.01:
                                # node y changes its state from V to R with probability of VR. At the same time, node x
                                # transforms its state from I to D with probability of ID
                                if tnew[i - 1][j + 1].VR > random.random():
                                    tnew_matrix[i - 1][j + 1] = 5

                                # Added
                                else:
                                    tnew_matrix[i - 1][j + 1] = 3

                                if tnew[i][j].ID > random.random():
                                    tnew_matrix[i][j] = 4
                    except IndexError:
                        pass

                    # Check node diagonally to the lower right if it exists
                    try:
                        if subGrid[i + 1][j - 1] == 1:
                            tmax = int(step)

                            # Formula for SR found on page 6, g1 and g2 are user defined constants
                            g1 = random.randint(1, 10)
                            g2 = random.randint(1, 10)
                            # try:
                            #     SR = (1 / (g1 * math.pow(math.e, (1 / tmax)))) - (
                            #                 (0.3 * IC) * (1 / (g2 * math.pow(math.e, ((1 / IC) + 1)))))
                            # except ZeroDivisionError:
                            #     SR = -1

                            # Formula for RR found on page 6. alpha can be user defined
                            alpha = random.random()
                            RR = (1 - math.pow(math.e, (alpha * tmax))) / (1 + math.pow(math.e, (alpha * tmax)))

                            # should be IR / RR * sqrt(2); but IR is not defined so SR is used
                            try:
                                b = SR / (RR * math.sqrt(2))
                            except ZeroDivisionError:
                                # If RR is 0 set Beta to 1; the device has no resistance and shall change
                                b = 1

                            #  and if β is greater than TR
                            if b > TR:
                                # node y changes its state from V to E with probability of VE
                                if tnew[i + 1][j - 1].VE > random.random():
                                    tnew_matrix[i + 1][j - 1] = 2
                                # Otherwise, node y remains in the previous state.
                                else:
                                    pass

                            if SR < 0 or RR > 0.01:
                                # node y changes its state from V to R with probability of VR. At the same time, node x
                                # transforms its state from I to D with probability of ID
                                if tnew[i + 1][j - 1].VR > random.random():
                                    tnew_matrix[i + 1][j - 1] = 5

                                # Added to spread malware
                                else:
                                    tnew_matrix[i + 1][j - 1] = 3

                                if tnew[i][j].ID > random.random():
                                    tnew_matrix[i][j] = 4
                    except IndexError:
                        pass

                    # Check node diagonally to the lower left if it exists
                    try:
                        if subGrid[i - 1][j - 1] == 1:
                            tmax = int(step)

                            # Formula for SR found on page 6, g1 and g2 are user defined constants
                            g1 = random.randint(1, 10)
                            g2 = random.randint(1, 10)
                            # try:
                            #     SR = (1 / (g1 * math.pow(math.e, (1 / tmax)))) - (
                            #                 (0.3 * IC) * (1 / (g2 * math.pow(math.e, ((1 / IC) + 1)))))
                            # except ZeroDivisionError:
                            #     SR = -1

                            # Formula for RR found on page 6. alpha can be user defined
                            alpha = random.random()
                            RR = (1 - math.pow(math.e, (alpha * tmax))) / (1 + math.pow(math.e, (alpha * tmax)))

                            # should be IR / RR * sqrt(2); but IR is not defined so SR is used
                            try:
                                b = SR / (RR * math.sqrt(2))
                            except ZeroDivisionError:
                                # If RR is 0 set Beta to 1; the device has no resistance and shall change
                                b = 1

                            #  and if β is greater than TR
                            if b > TR:
                                # node y changes its state from V to E with probability of VE
                                if tnew[i - 1][j - 1].VE > random.random():
                                    tnew_matrix[i - 1][j - 1] = 2
                                # Otherwise, node y remains in the previous state.
                                else:
                                    pass

                            if SR < 0 or RR > 0.01:
                                # node y changes its state from V to R with probability of VR. At the same time, node x
                                # transforms its state from I to D with probability of ID
                                if tnew[i - 1][j - 1].VR > random.random():
                                    tnew_matrix[i - 1][j - 1] = 5

                                # Added to spread malware
                                else:
                                    tnew_matrix[i - 1][j - 1] = 3

                                if tnew[i][j].ID > random.random():
                                    tnew_matrix[i][j] = 4
                    except IndexError:
                        pass
                # If this, then it only checks to the left, right, above and below of x node
                else:

                    # Check node to the left if it exists
                    try:
                        if subGrid[i - 1][j] == 1:
                            tmax = int(step)

                            # Formula for SR found on page 6, g1 and g2 are user defined constants
                            g1 = random.randint(1, 10)
                            g2 = random.randint(1, 10)
                            # try:
                            #     SR = (1 / (g1 * math.pow(math.e, (1 / tmax)))) - (
                            #                 (0.3 * IC) * (1 / (g2 * math.pow(math.e, ((1 / IC) + 1)))))
                            # except ZeroDivisionError:
                            #     SR = -1

                            # Formula for RR found on page 6. alpha can be user defined
                            alpha = random.random()
                            RR = (1 - math.pow(math.e, (alpha * tmax))) / (1 + math.pow(math.e, (alpha * tmax)))

                            # should be IR / RR * sqrt(2); but IR is not defined so SR is used
                            try:
                                b = SR / (RR * math.sqrt(2))
                            except ZeroDivisionError:
                                # If RR is 0 set Beta to 1; the device has no resistance and shall change
                                b = 1

                            #  and if β is greater than TR
                            if b > TR:
                                # node y changes its state from V to E with probability of VE
                                if tnew[i - 1][j].VE > random.random():
                                    tnew_matrix[i - 1][j] = 2
                                # Otherwise, node y remains in the previous state.
                                else:
                                    pass

                            if SR < 0 or RR > 0.01:
                                # node y changes its state from V to R with probability of VR. At the same time, node x
                                # transforms its state from I to D with probability of ID
                                if tnew[i - 1][j].VR > random.random():
                                    tnew_matrix[i - 1][j] = 5

                                # Added to spread malware
                                else:
                                    tnew_matrix[i - 1][j] = 3

                                if tnew[i][j].ID > random.random():
                                    tnew_matrix[i][j] = 4
                    except IndexError:
                        pass

                    # Check node to the below if it exists
                    try:
                        if subGrid[i][j - 1] == 1:
                            tmax = int(step)

                            # Formula for SR found on page 6, g1 and g2 are user defined constants
                            g1 = random.randint(1, 10)
                            g2 = random.randint(1, 10)
                            # try:
                            #     SR = (1 / (g1 * math.pow(math.e, (1 / tmax)))) - (
                            #                 (0.3 * IC) * (1 / (g2 * math.pow(math.e, ((1 / IC) + 1)))))
                            # except ZeroDivisionError:
                            #     SR = -1

                            # Formula for RR found on page 6. alpha can be user defined
                            alpha = random.random()
                            RR = (1 - math.pow(math.e, (alpha * tmax))) / (1 + math.pow(math.e, (alpha * tmax)))

                            # should be IR / RR * sqrt(2); but IR is not defined so SR is used
                            try:
                                b = SR / (RR * math.sqrt(2))
                            except ZeroDivisionError:
                                # If RR is 0 set Beta to 1; the device has no resistance and shall change
                                b = 1

                            #  and if β is greater than TR
                            if b > TR:
                                # node y changes its state from V to E with probability of VE
                                if tnew[i][j - 1].VE > random.random():
                                    tnew_matrix[i][j - 1] = 2
                                # Otherwise, node y remains in the previous state.
                                else:
                                    pass

                            if SR < 0 or RR > 0.01:
                                # node y changes its state from V to R with probability of VR. At the same time, node x
                                # transforms its state from I to D with probability of ID
                                if tnew[i][j - 1].VR > random.random():
                                    tnew_matrix[i][j - 1] = 5

                                # Added to spread malware
                                else:
                                    tnew_matrix[i][j - 1] = 3

                                if tnew[i][j].ID > random.random():
                                    tnew_matrix[i][j] = 4
                    except IndexError:
                        pass

                    # Check node to the above if it exists
                    try:
                        if subGrid[i][j + 1] == 1:
                            tmax = int(step)

                            # Formula for SR found on page 6, g1 and g2 are user defined constants
                            g1 = random.randint(1, 10)
                            g2 = random.randint(1, 10)
                            # try:
                            #     SR = (1 / (g1 * math.pow(math.e, (1 / tmax)))) - (
                            #                 (0.3 * IC) * (1 / (g2 * math.pow(math.e, ((1 / IC) + 1)))))
                            # except ZeroDivisionError:
                            #     SR = -1

                            # Formula for RR found on page 6. alpha can be user defined
                            alpha = random.random()
                            RR = (1 - math.pow(math.e, (alpha * tmax))) / (1 + math.pow(math.e, (alpha * tmax)))

                            # should be IR / RR * sqrt(2); but IR is not defined so SR is used
                            try:
                                b = SR / (RR * math.sqrt(2))
                            except ZeroDivisionError:
                                # If RR is 0 set Beta to 1; the device has no resistance and shall change
                                b = 1

                            #  and if β is greater than TR
                            if b > TR:
                                # node y changes its state from V to E with probability of VE
                                if tnew[i][j + 1].VE > random.random():
                                    tnew_matrix[i][j + 1] = 2
                                # Otherwise, node y remains in the previous state.
                                else:
                                    pass

                            if SR < 0 or RR > 0.01:
                                # node y changes its state from V to R with probability of VR. At the same time, node x
                                # transforms its state from I to D with probability of ID
                                if tnew[i][j + 1].VR > random.random():
                                    tnew_matrix[i][j + 1] = 5

                                # Added to spread malware
                                else:
                                    tnew_matrix[i][j + 1] = 3

                                if tnew[i][j].ID > random.random():
                                    tnew_matrix[i][j] = 4
                    except IndexError:
                        pass

                    # Check node to the right if it exists
                    try:
                        if subGrid[i + 1][j] == 1:
                            tmax = int(step)

                            # Formula for SR found on page 6, g1 and g2 are user defined constants
                            g1 = random.randint(1, 10)
                            g2 = random.randint(1, 10)
                            # try:
                            #     SR = (1 / (g1 * math.pow(math.e, (1 / tmax)))) - (
                            #                 (0.3 * IC) * (1 / (g2 * math.pow(math.e, ((1 / IC) + 1)))))
                            # except ZeroDivisionError:
                            #     SR = -1

                            # Formula for RR found on page 6. alpha can be user defined
                            alpha = random.random()
                            RR = (1 - math.pow(math.e, (alpha * tmax))) / (1 + math.pow(math.e, (alpha * tmax)))

                            # should be IR / RR * sqrt(2); but IR is not defined so SR is used
                            try:
                                b = SR / (RR * math.sqrt(2))
                            except ZeroDivisionError:
                                # If RR is 0 set Beta to 1; the device has no resistance and shall change
                                b = 1

                            #  and if β is greater than TR
                            if b > TR:
                                # node y changes its state from V to E with probability of VE
                                if tnew[i + 1][j].VE > random.random():
                                    tnew_matrix[i + 1][j] = 2
                                # Otherwise, node y remains in the previous state.
                                else:
                                    pass

                            if SR < 0 or RR > 0.01:
                                # node y changes its state from V to R with probability of VR. At the same time, node x
                                # transforms its state from I to D with probability of ID
                                if tnew[i + 1][j].VR > random.random():
                                    tnew_matrix[i + 1][j] = 5

                                # Added to spread malware
                                else:
                                    tnew_matrix[i + 1][j] = 3

                                if tnew[i][j].ID > random.random():
                                    tnew_matrix[i][j] = 4
                    except IndexError:
                        pass

    subGrid = np.copy(tnew_matrix)


# The main body of the algorithm
# compute new grid and pass rows to neighbors
# t is now subGrid and tnew is now tnew
for step in range(generations):
    print("Starting Round: " + str(step))
    # exchange edge rows for next iteration
    if rank == 0:
        msgUp()
    elif rank == size - 1:
        msgDown()
    else:
        msgUp()
        msgDown()

    spreadMalware()

    mainGrid = comm.allgather(subGrid[1:subROWS - 1, :])
    mainGrid = np.asarray(mainGrid)

    finalGrid = comm.gather(subGrid[1:subROWS - 1, 1:NY - 1], root=0)

    tnew = updateArrayToList(finalGrid, tnew)
    showCellPhones(NX, NY, tnew)

finalGrid = comm.gather(subGrid[1:subROWS - 1, 1:NY - 1], root=0)
tnew = updateArrayToList(finalGrid, tnew)

if rank == 0:
    showCellPhones_persist(NX, NY, tnew)
    end = time.time()
    print("Total Execution Time: " + str((end - start)))
